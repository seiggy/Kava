{"version":3,"sources":["angular-bootstrap-calendar.js","services/calendarTitle.js","services/calendarHelper.js","services/calendarDebounce.js","services/calendarConfig.js","filters/calendarTruncateEventTitle.js","filters/calendarLimitTo.js","directives/mwlDateModifier.js","directives/mwlCollapseFallback.js","directives/mwlCalendarYear.js","directives/mwlCalendarWeek.js","directives/mwlCalendarSlideBox.js","directives/mwlCalendarMonth.js","directives/mwlCalendarDay.js","directives/mwlCalendar.js"],"names":["window","angular","module","constant","moment","factory","weekTitleLabel","day","currentDay","month","format","calendarConfig","titleFormats","week","replace","year","eventEnd","eventStart","eventIsInPeriod","periodStart","periodEnd","getEventsInPeriod","startPeriod","allEvents","filter","endsAt","endPeriod","isAfter","isBefore","isSame","calendarDate","period","startOf","endOf","incrementsBadgeTotal","length","event","startsAt","weekdays","events","count","getWeekDayNames","filterEventsInPeriod","view","eventsInPeriod","getYearView","push","label","periodEvents","clone","date","badgeTotal","getBadgeTotal","dateFormats","startOfMonth","endOfMonthView","today","monthEvents","inMonth","isPast","isFuture","isWeekend","indexOf","getWeekView","endOfWeek","days","weekDayLabel","dayCounter","isToday","weekDay","dayLabel","eventsSorted","weekViewEnd","weekViewStart","span","offset","diff","daySpan","dayOffset","calendarEnd","calendarHeight","calendarStart","add","dayStartHour","dayEndHour","hourHeight","hourHeightMultiplier","buckets","toDate","top","height","diffStart","forEach","bucket","map","canFitInThisBucket","cannotFitInABucket","getMonthView","bucketIndex","bucketItem","left","getDayView","service","args","$timeout","debounce","immediate","timeout","callNow","cancel","apply","context","this","arguments","later","wait","func","hour","provider","defaultTitleFormats","i18nStrings","eventsLabel","timeLabel","configProvider","formats","extend","defaultDateFormats","strings","$get","string","boxHeight","substr","limitToFilter","version","Number","limit","begin","Math","abs","input","Infinity","toString","isNaN","slice","parseInt","directive","max","restrict","controller","$element","isDefined","$scope","$attrs","setToToday","$apply","Date","increment","onClick","decrement","unbind","subtract","bind","$on","scope","$injector","has","unbindWatcher","$watch","mwlCollapseFallback","shouldCollapse","unbindDestroy","addClass","removeClass","templateUrl","onEventClick","onEditEventClick","require","onDeleteEventClick","deleteEventHtml","autoOpen","onTimespanClick","editEventHtml","vm","firstRun","calendarHelper","monthClicked","monthClickedFirstRun","openMonthIndex","openRowIndex","monthIndex","attrs","calendarCtrl","controllerAs","$sce","isOpen","isMonthView","link","elm","ctrls","floor","monthOffsets","weekDays","rows","i","dayClickedFirstRun","dayClicked","openDayIndex","dayIndex","highlightEvent","highlightClass","shouldAddClass","dayContainsEvent","type","dayViewStart","dayViewEnd","dayViewSplit","hours","originalLocale","locale","updateDays","onDrillDownClick","calendarTitle","calendarDebounce","drillDown","changeView","newDay","nextView","calendarNextView","previousDate","previousView","copy","refreshCalendar","rawDate","shouldUpdate","$broadcast","currentDate","unbindLocaleWatcher","unbindOnDestroy","unbindDestroyListener"],"mappings":"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","file":"angular-bootstrap-calendar.min.js","sourcesContent":["/**\n * angular-bootstrap-calendar - A pure AngularJS bootstrap themed responsive calendar that can display events and has views for year, month, week and day\n * @version v0.10.7\n * @link https://github.com/mattlewis92/angular-bootstrap-calendar\n * @license MIT\n */\n(function (window, angular) {\n    'use strict';\n    angular.module('mwl.calendar', []);\n    'use strict';\n    angular.module('mwl.calendar').constant('moment', window.moment);\n    'use strict';\n    angular.module('mwl.calendar').factory('calendarTitle', [\n        'moment',\n        'calendarConfig',\n        function (moment, calendarConfig) {\n            function day(currentDay) {\n                return moment(currentDay).format(calendarConfig.titleFormats.day);\n            }\n            function week(currentDay) {\n                var weekTitleLabel = calendarConfig.titleFormats.week;\n                return weekTitleLabel.replace('{week}', moment(currentDay).week()).replace('{year}', moment(currentDay).format('YYYY'));\n            }\n            function month(currentDay) {\n                return moment(currentDay).format(calendarConfig.titleFormats.month);\n            }\n            function year(currentDay) {\n                return moment(currentDay).format(calendarConfig.titleFormats.year);\n            }\n            return {\n                day: day,\n                week: week,\n                month: month,\n                year: year\n            };\n        }\n    ]);\n    'use strict';\n    angular.module('mwl.calendar').factory('calendarHelper', [\n        'moment',\n        'calendarConfig',\n        function (moment, calendarConfig) {\n            function eventIsInPeriod(eventStart, eventEnd, periodStart, periodEnd) {\n                eventStart = moment(eventStart);\n                eventEnd = moment(eventEnd);\n                periodStart = moment(periodStart);\n                periodEnd = moment(periodEnd);\n                return eventStart.isAfter(periodStart) && eventStart.isBefore(periodEnd) || eventEnd.isAfter(periodStart) && eventEnd.isBefore(periodEnd) || eventStart.isBefore(periodStart) && eventEnd.isAfter(periodEnd) || eventStart.isSame(periodStart) || eventEnd.isSame(periodEnd);\n            }\n            function getEventsInPeriod(calendarDate, period, allEvents) {\n                var startPeriod = moment(calendarDate).startOf(period);\n                var endPeriod = moment(calendarDate).endOf(period);\n                return allEvents.filter(function (event) {\n                    return eventIsInPeriod(event.startsAt, event.endsAt, startPeriod, endPeriod);\n                });\n            }\n            function getBadgeTotal(events) {\n                return events.filter(function (event) {\n                    return event.incrementsBadgeTotal !== false;\n                }).length;\n            }\n            function getWeekDayNames() {\n                var weekdays = [];\n                var count = 0;\n                while (count < 7) {\n                    weekdays.push(moment().weekday(count++).format(calendarConfig.dateFormats.weekDay));\n                }\n                return weekdays;\n            }\n            function filterEventsInPeriod(events, startPeriod, endPeriod) {\n                return events.filter(function (event) {\n                    return eventIsInPeriod(event.startsAt, event.endsAt, startPeriod, endPeriod);\n                });\n            }\n            function getYearView(events, currentDay) {\n                var view = [];\n                var eventsInPeriod = getEventsInPeriod(currentDay, 'year', events);\n                var month = moment(currentDay).startOf('year');\n                var count = 0;\n                while (count < 12) {\n                    var startPeriod = month.clone();\n                    var endPeriod = startPeriod.clone().endOf('month');\n                    var periodEvents = filterEventsInPeriod(eventsInPeriod, startPeriod, endPeriod);\n                    view.push({\n                        label: startPeriod.format(calendarConfig.dateFormats.month),\n                        isToday: startPeriod.isSame(moment().startOf('month')),\n                        events: periodEvents,\n                        date: startPeriod,\n                        badgeTotal: getBadgeTotal(periodEvents)\n                    });\n                    month.add(1, 'month');\n                    count++;\n                }\n                return view;\n            }\n            function getMonthView(events, currentDay) {\n                var eventsInPeriod = getEventsInPeriod(currentDay, 'month', events);\n                var startOfMonth = moment(currentDay).startOf('month');\n                var day = startOfMonth.clone().startOf('week');\n                var endOfMonthView = moment(currentDay).endOf('month').endOf('week');\n                var view = [];\n                var today = moment().startOf('day');\n                while (day.isBefore(endOfMonthView)) {\n                    var inMonth = day.month() === moment(currentDay).month();\n                    var monthEvents = [];\n                    if (inMonth) {\n                        monthEvents = filterEventsInPeriod(eventsInPeriod, day, day.clone().endOf('day'));\n                    }\n                    view.push({\n                        label: day.date(),\n                        date: day.clone(),\n                        inMonth: inMonth,\n                        isPast: today.isAfter(day),\n                        isToday: today.isSame(day),\n                        isFuture: today.isBefore(day),\n                        isWeekend: [\n                            0,\n                            6\n                        ].indexOf(day.day()) > -1,\n                        events: monthEvents,\n                        badgeTotal: getBadgeTotal(monthEvents)\n                    });\n                    day.add(1, 'day');\n                }\n                return view;\n            }\n            function getWeekView(events, currentDay) {\n                var startOfWeek = moment(currentDay).startOf('week');\n                var endOfWeek = moment(currentDay).endOf('week');\n                var dayCounter = startOfWeek.clone();\n                var days = [];\n                var today = moment().startOf('day');\n                while (days.length < 7) {\n                    days.push({\n                        weekDayLabel: dayCounter.format(calendarConfig.dateFormats.weekDay),\n                        date: dayCounter.clone(),\n                        dayLabel: dayCounter.format(calendarConfig.dateFormats.day),\n                        isPast: dayCounter.isBefore(today),\n                        isToday: dayCounter.isSame(today),\n                        isFuture: dayCounter.isAfter(today),\n                        isWeekend: [\n                            0,\n                            6\n                        ].indexOf(dayCounter.day()) > -1\n                    });\n                    dayCounter.add(1, 'day');\n                }\n                var eventsSorted = filterEventsInPeriod(events, startOfWeek, endOfWeek).map(function (event) {\n                    var eventStart = moment(event.startsAt).startOf('day');\n                    var eventEnd = moment(event.endsAt).startOf('day');\n                    var weekViewStart = moment(startOfWeek).startOf('day');\n                    var weekViewEnd = moment(endOfWeek).startOf('day');\n                    var offset, span;\n                    if (eventStart.isBefore(weekViewStart) || eventStart.isSame(weekViewStart)) {\n                        offset = 0;\n                    } else {\n                        offset = eventStart.diff(weekViewStart, 'days');\n                    }\n                    if (eventEnd.isAfter(weekViewEnd)) {\n                        eventEnd = weekViewEnd;\n                    }\n                    if (eventStart.isBefore(weekViewStart)) {\n                        eventStart = weekViewStart;\n                    }\n                    span = moment(eventEnd).diff(eventStart, 'days') + 1;\n                    event.daySpan = span;\n                    event.dayOffset = offset;\n                    return event;\n                });\n                return {\n                    days: days,\n                    events: eventsSorted\n                };\n            }\n            function getDayView(events, currentDay, dayStartHour, dayEndHour, hourHeight) {\n                var calendarStart = moment(currentDay).startOf('day').add(dayStartHour, 'hours');\n                var calendarEnd = moment(currentDay).startOf('day').add(dayEndHour, 'hours');\n                var calendarHeight = (dayEndHour - dayStartHour + 1) * hourHeight;\n                var hourHeightMultiplier = hourHeight / 60;\n                var buckets = [];\n                var eventsInPeriod = filterEventsInPeriod(events, moment(currentDay).startOf('day').toDate(), moment(currentDay).endOf('day').toDate());\n                return eventsInPeriod.map(function (event) {\n                    if (moment(event.startsAt).isBefore(calendarStart)) {\n                        event.top = 0;\n                    } else {\n                        event.top = moment(event.startsAt).startOf('minute').diff(calendarStart.startOf('minute'), 'minutes') * hourHeightMultiplier - 2;\n                    }\n                    if (moment(event.endsAt).isAfter(calendarEnd)) {\n                        event.height = calendarHeight - event.top;\n                    } else {\n                        var diffStart = event.startsAt;\n                        if (moment(event.startsAt).isBefore(calendarStart)) {\n                            diffStart = calendarStart.toDate();\n                        }\n                        event.height = moment(event.endsAt).diff(diffStart, 'minutes') * hourHeightMultiplier;\n                    }\n                    if (event.top - event.height > calendarHeight) {\n                        event.height = 0;\n                    }\n                    event.left = 0;\n                    return event;\n                }).filter(function (event) {\n                    return event.height > 0;\n                }).map(function (event) {\n                    var cannotFitInABucket = true;\n                    buckets.forEach(function (bucket, bucketIndex) {\n                        var canFitInThisBucket = true;\n                        bucket.forEach(function (bucketItem) {\n                            if (eventIsInPeriod(event.startsAt, event.endsAt, bucketItem.startsAt, bucketItem.endsAt) || eventIsInPeriod(bucketItem.startsAt, bucketItem.endsAt, event.startsAt, event.endsAt)) {\n                                canFitInThisBucket = false;\n                            }\n                        });\n                        if (canFitInThisBucket && cannotFitInABucket) {\n                            cannotFitInABucket = false;\n                            event.left = bucketIndex * 150;\n                            buckets[bucketIndex].push(event);\n                        }\n                    });\n                    if (cannotFitInABucket) {\n                        event.left = buckets.length * 150;\n                        buckets.push([event]);\n                    }\n                    return event;\n                });\n            }\n            return {\n                getWeekDayNames: getWeekDayNames,\n                getYearView: getYearView,\n                getMonthView: getMonthView,\n                getWeekView: getWeekView,\n                getDayView: getDayView\n            };\n        }\n    ]);\n    'use strict';\n    angular.module('mwl.calendar').service('calendarDebounce', [\n        '$timeout',\n        function ($timeout) {\n            function debounce(func, wait, immediate) {\n                var timeout;\n                return function () {\n                    var context = this, args = arguments;\n                    function later() {\n                        timeout = null;\n                        if (!immediate) {\n                            func.apply(context, args);\n                        }\n                    }\n                    var callNow = immediate && !timeout;\n                    $timeout.cancel(timeout);\n                    timeout = $timeout(later, wait);\n                    if (callNow) {\n                        func.apply(context, args);\n                    }\n                };\n            }\n            return debounce;\n        }\n    ]);\n    'use strict';\n    angular.module('mwl.calendar').provider('calendarConfig', function () {\n        var defaultDateFormats = {\n            hour: 'ha',\n            day: 'D MMM',\n            month: 'MMMM',\n            weekDay: 'dddd'\n        };\n        var defaultTitleFormats = {\n            day: 'dddd D MMMM, YYYY',\n            week: 'Week {week} of {year}',\n            month: 'MMMM YYYY',\n            year: 'YYYY'\n        };\n        var i18nStrings = {\n            eventsLabel: 'Events',\n            timeLabel: 'Time'\n        };\n        var configProvider = this;\n        configProvider.setDateFormats = function (formats) {\n            angular.extend(defaultDateFormats, formats);\n            return configProvider;\n        };\n        configProvider.setTitleFormats = function (formats) {\n            angular.extend(defaultTitleFormats, formats);\n            return configProvider;\n        };\n        configProvider.setI18nStrings = function (strings) {\n            angular.extend(i18nStrings, strings);\n            return configProvider;\n        };\n        configProvider.$get = function () {\n            return {\n                dateFormats: defaultDateFormats,\n                titleFormats: defaultTitleFormats,\n                i18nStrings: i18nStrings\n            };\n        };\n    });\n    'use strict';\n    angular.module('mwl.calendar').filter('calendarTruncateEventTitle', function () {\n        return function (string, length, boxHeight) {\n            if (!string) {\n                return '';\n            }\n            //Only truncate if if actually needs truncating\n            if (string.length >= length && string.length / 20 > boxHeight / 30) {\n                return string.substr(0, length) + '...';\n            } else {\n                return string;\n            }\n        };\n    });\n    'use strict';\n    angular.module('mwl.calendar').filter('calendarLimitTo', [\n        'limitToFilter',\n        function (limitToFilter) {\n            if (angular.version.minor >= 4) {\n                //1.4+ supports the begin attribute\n                return limitToFilter;\n            }\n            //Copied from the angular source. Only 1.4 has the begin functionality.\n            return function (input, limit, begin) {\n                if (Math.abs(Number(limit)) === Infinity) {\n                    limit = Number(limit);\n                } else {\n                    limit = parseInt(limit);\n                }\n                if (isNaN(limit)) {\n                    return input;\n                }\n                if (angular.isNumber(input)) {\n                    input = input.toString();\n                }\n                if (!angular.isArray(input) && !angular.isString(input)) {\n                    return input;\n                }\n                begin = !begin || isNaN(begin) ? 0 : parseInt(begin);\n                begin = begin < 0 && begin >= -input.length ? input.length + begin : begin;\n                if (limit >= 0) {\n                    return input.slice(begin, begin + limit);\n                } else if (begin === 0) {\n                    return input.slice(limit, input.length);\n                } else {\n                    return input.slice(Math.max(0, begin + limit), begin);\n                }\n            };\n        }\n    ]);\n    'use strict';\n    angular.module('mwl.calendar').directive('mwlDateModifier', function () {\n        return {\n            restrict: 'A',\n            controller: [\n                '$element',\n                '$attrs',\n                '$scope',\n                'moment',\n                function ($element, $attrs, $scope, moment) {\n                    function onClick() {\n                        if (angular.isDefined($attrs.setToToday)) {\n                            $scope.date = new Date();\n                        } else if (angular.isDefined($attrs.increment)) {\n                            $scope.date = moment($scope.date).add(1, $scope.increment).toDate();\n                        } else if (angular.isDefined($attrs.decrement)) {\n                            $scope.date = moment($scope.date).subtract(1, $scope.decrement).toDate();\n                        }\n                        $scope.$apply();\n                    }\n                    $element.bind('click', onClick);\n                    $scope.$on('$destroy', function () {\n                        $element.unbind('click', onClick);\n                    });\n                }\n            ],\n            scope: {\n                date: '=',\n                increment: '=',\n                decrement: '='\n            }\n        };\n    });\n    'use strict';\n    angular.module('mwl.calendar').directive('mwlCollapseFallback', [\n        '$injector',\n        function ($injector) {\n            if ($injector.has('collapseDirective')) {\n                return {};\n            }\n            return {\n                restrict: 'A',\n                controller: [\n                    '$scope',\n                    '$attrs',\n                    '$element',\n                    function ($scope, $attrs, $element) {\n                        var unbindWatcher = $scope.$watch($attrs.mwlCollapseFallback, function (shouldCollapse) {\n                            if (shouldCollapse) {\n                                $element.addClass('ng-hide');\n                            } else {\n                                $element.removeClass('ng-hide');\n                            }\n                        });\n                        var unbindDestroy = $scope.$on('$destroy', function () {\n                            unbindDestroy();\n                            unbindWatcher();\n                        });\n                    }\n                ]\n            };\n        }\n    ]);\n    'use strict';\n    angular.module('mwl.calendar').directive('mwlCalendarYear', function () {\n        return {\n            templateUrl: 'src/templates/calendarYearView.html',\n            restrict: 'EA',\n            require: '^mwlCalendar',\n            scope: {\n                events: '=',\n                currentDay: '=',\n                onEventClick: '=',\n                onEditEventClick: '=',\n                onDeleteEventClick: '=',\n                editEventHtml: '=',\n                deleteEventHtml: '=',\n                autoOpen: '=',\n                onTimespanClick: '='\n            },\n            controller: [\n                '$scope',\n                'moment',\n                'calendarHelper',\n                function ($scope, moment, calendarHelper) {\n                    var vm = this;\n                    var firstRun = true;\n                    $scope.$on('calendar.refreshView', function () {\n                        vm.view = calendarHelper.getYearView($scope.events, $scope.currentDay);\n                        //Auto open the calendar to the current day if set\n                        if ($scope.autoOpen && firstRun) {\n                            firstRun = false;\n                            vm.view.forEach(function (month) {\n                                if (moment($scope.currentDay).startOf('month').isSame(month.date)) {\n                                    vm.monthClicked(month, true);\n                                }\n                            });\n                        }\n                    });\n                    vm.monthClicked = function (month, monthClickedFirstRun) {\n                        if (!monthClickedFirstRun) {\n                            $scope.onTimespanClick({ calendarDate: month.date.toDate() });\n                        }\n                        vm.openRowIndex = null;\n                        var monthIndex = vm.view.indexOf(month);\n                        if (monthIndex === vm.openMonthIndex) {\n                            //the month has been clicked and is already open\n                            vm.openMonthIndex = null;    //close the open month\n                        } else {\n                            vm.openMonthIndex = monthIndex;\n                            vm.openRowIndex = Math.floor(monthIndex / 4);\n                        }\n                    };\n                }\n            ],\n            controllerAs: 'vm',\n            link: function (scope, element, attrs, calendarCtrl) {\n                scope.vm.calendarCtrl = calendarCtrl;\n            }\n        };\n    });\n    'use strict';\n    angular.module('mwl.calendar').directive('mwlCalendarWeek', function () {\n        return {\n            templateUrl: 'src/templates/calendarWeekView.html',\n            restrict: 'EA',\n            require: '^mwlCalendar',\n            scope: {\n                events: '=',\n                currentDay: '=',\n                onEventClick: '='\n            },\n            controller: [\n                '$scope',\n                'calendarHelper',\n                function ($scope, calendarHelper) {\n                    var vm = this;\n                    $scope.$on('calendar.refreshView', function () {\n                        vm.view = calendarHelper.getWeekView($scope.events, $scope.currentDay);\n                    });\n                }\n            ],\n            controllerAs: 'vm',\n            link: function (scope, element, attrs, calendarCtrl) {\n                scope.vm.calendarCtrl = calendarCtrl;\n            }\n        };\n    });\n    'use strict';\n    angular.module('mwl.calendar').directive('mwlCalendarSlideBox', function () {\n        return {\n            restrict: 'EA',\n            templateUrl: 'src/templates/calendarSlideBox.html',\n            replace: true,\n            controller: [\n                '$scope',\n                '$sce',\n                function ($scope, $sce) {\n                    var vm = this;\n                    vm.$sce = $sce;\n                    var unbindWatcher = $scope.$watch('isOpen', function (isOpen) {\n                        vm.shouldCollapse = !isOpen;\n                    });\n                    var unbindDestroy = $scope.$on('$destroy', function () {\n                        unbindDestroy();\n                        unbindWatcher();\n                    });\n                }\n            ],\n            controllerAs: 'vm',\n            require: [\n                '^?mwlCalendarMonth',\n                '^?mwlCalendarYear'\n            ],\n            link: function (scope, elm, attrs, ctrls) {\n                scope.isMonthView = !!ctrls[0];\n                scope.isYearView = !!ctrls[1];\n            },\n            scope: {\n                isOpen: '=',\n                events: '=',\n                onEventClick: '=',\n                editEventHtml: '=',\n                onEditEventClick: '=',\n                deleteEventHtml: '=',\n                onDeleteEventClick: '='\n            }\n        };\n    });\n    'use strict';\n    angular.module('mwl.calendar').directive('mwlCalendarMonth', function () {\n        return {\n            templateUrl: 'src/templates/calendarMonthView.html',\n            restrict: 'EA',\n            require: '^mwlCalendar',\n            scope: {\n                events: '=',\n                currentDay: '=',\n                onEventClick: '=',\n                onEditEventClick: '=',\n                onDeleteEventClick: '=',\n                editEventHtml: '=',\n                deleteEventHtml: '=',\n                autoOpen: '=',\n                onTimespanClick: '='\n            },\n            controller: [\n                '$scope',\n                'moment',\n                'calendarHelper',\n                function ($scope, moment, calendarHelper) {\n                    var vm = this;\n                    var firstRun = true;\n                    $scope.$on('calendar.refreshView', function () {\n                        vm.weekDays = calendarHelper.getWeekDayNames();\n                        vm.view = calendarHelper.getMonthView($scope.events, $scope.currentDay);\n                        var rows = Math.floor(vm.view.length / 7);\n                        vm.monthOffsets = [];\n                        for (var i = 0; i < rows; i++) {\n                            vm.monthOffsets.push(i * 7);\n                        }\n                        //Auto open the calendar to the current day if set\n                        if ($scope.autoOpen && firstRun) {\n                            firstRun = false;\n                            vm.view.forEach(function (day) {\n                                if (day.inMonth && moment($scope.currentDay).startOf('day').isSame(day.date)) {\n                                    vm.dayClicked(day, true);\n                                }\n                            });\n                        }\n                    });\n                    vm.dayClicked = function (day, dayClickedFirstRun) {\n                        if (!dayClickedFirstRun) {\n                            $scope.onTimespanClick({ calendarDate: day.date.toDate() });\n                        }\n                        vm.openRowIndex = null;\n                        var dayIndex = vm.view.indexOf(day);\n                        if (dayIndex === vm.openDayIndex) {\n                            //the day has been clicked and is already open\n                            vm.openDayIndex = null;    //close the open day\n                        } else {\n                            vm.openDayIndex = dayIndex;\n                            vm.openRowIndex = Math.floor(dayIndex / 7);\n                        }\n                    };\n                    vm.highlightEvent = function (event, shouldAddClass) {\n                        vm.view.forEach(function (day) {\n                            delete day.highlightClass;\n                            if (shouldAddClass) {\n                                var dayContainsEvent = day.events.indexOf(event) > -1;\n                                if (dayContainsEvent) {\n                                    day.highlightClass = 'day-highlight dh-event-' + event.type;\n                                }\n                            }\n                        });\n                    };\n                }\n            ],\n            controllerAs: 'vm',\n            link: function (scope, element, attrs, calendarCtrl) {\n                scope.vm.calendarCtrl = calendarCtrl;\n            }\n        };\n    });\n    'use strict';\n    angular.module('mwl.calendar').directive('mwlCalendarDay', function () {\n        return {\n            templateUrl: 'src/templates/calendarDayView.html',\n            restrict: 'EA',\n            require: '^mwlCalendar',\n            scope: {\n                events: '=',\n                currentDay: '=',\n                onEventClick: '=',\n                dayViewStart: '=',\n                dayViewEnd: '=',\n                dayViewSplit: '='\n            },\n            controller: [\n                '$scope',\n                '$timeout',\n                'moment',\n                'calendarHelper',\n                'calendarConfig',\n                function ($scope, $timeout, moment, calendarHelper, calendarConfig) {\n                    var vm = this;\n                    var dayViewStart, dayViewEnd;\n                    vm.calendarConfig = calendarConfig;\n                    function updateDays() {\n                        dayViewStart = moment($scope.dayViewStart || '00:00', 'HH:mm');\n                        dayViewEnd = moment($scope.dayViewEnd || '23:00', 'HH:mm');\n                        vm.dayViewSplit = parseInt($scope.dayViewSplit);\n                        vm.hourHeight = 60 / $scope.dayViewSplit * 30;\n                        vm.hours = [];\n                        var dayCounter = moment(dayViewStart);\n                        for (var i = 0; i <= dayViewEnd.diff(dayViewStart, 'hours'); i++) {\n                            vm.hours.push({ label: dayCounter.format(calendarConfig.dateFormats.hour) });\n                            dayCounter.add(1, 'hour');\n                        }\n                    }\n                    var originalLocale = moment.locale();\n                    $scope.$on('calendar.refreshView', function () {\n                        if (originalLocale !== moment.locale()) {\n                            originalLocale = moment.locale();\n                            updateDays();\n                        }\n                        vm.view = calendarHelper.getDayView($scope.events, $scope.currentDay, dayViewStart.hours(), dayViewEnd.hours(), vm.hourHeight);\n                    });\n                    updateDays();\n                }\n            ],\n            controllerAs: 'vm'\n        };\n    });\n    'use strict';\n    angular.module('mwl.calendar').directive('mwlCalendar', function () {\n        return {\n            templateUrl: 'src/templates/calendar.html',\n            restrict: 'EA',\n            scope: {\n                events: '=',\n                view: '=',\n                viewTitle: '=',\n                currentDay: '=',\n                editEventHtml: '=',\n                deleteEventHtml: '=',\n                autoOpen: '=',\n                onEventClick: '&',\n                onEditEventClick: '&',\n                onDeleteEventClick: '&',\n                onTimespanClick: '&',\n                onDrillDownClick: '&',\n                dayViewStart: '@',\n                dayViewEnd: '@',\n                dayViewSplit: '@'\n            },\n            controller: [\n                '$scope',\n                '$timeout',\n                'moment',\n                'calendarTitle',\n                'calendarDebounce',\n                function ($scope, $timeout, moment, calendarTitle, calendarDebounce) {\n                    var vm = this;\n                    $scope.events = $scope.events || [];\n                    vm.changeView = function (view, newDay) {\n                        $scope.view = view;\n                        $scope.currentDay = newDay;\n                    };\n                    vm.drillDown = function (date) {\n                        var rawDate = moment(date).toDate();\n                        var nextView = {\n                            year: 'month',\n                            month: 'day',\n                            week: 'day'\n                        };\n                        if ($scope.onDrillDownClick({\n                                calendarDate: rawDate,\n                                calendarNextView: nextView[$scope.view]\n                            }) !== false) {\n                            vm.changeView(nextView[$scope.view], rawDate);\n                        }\n                    };\n                    var previousDate = moment($scope.currentDay);\n                    var previousView = angular.copy($scope.view);\n                    //Use a debounce to prevent it being called 3 times on initialisation\n                    var refreshCalendar = calendarDebounce(function () {\n                        if (calendarTitle[$scope.view]) {\n                            $scope.viewTitle = calendarTitle[$scope.view]($scope.currentDay);\n                        }\n                        //if on-timespan-click=\"calendarDay = calendarDate\" is set then dont update the view as nothing needs to change\n                        var currentDate = moment($scope.currentDay);\n                        var shouldUpdate = true;\n                        if (previousDate.clone().startOf($scope.view).isSame(currentDate.clone().startOf($scope.view)) && !previousDate.isSame(currentDate) && $scope.view === previousView) {\n                            shouldUpdate = false;\n                        }\n                        previousDate = currentDate;\n                        previousView = angular.copy($scope.view);\n                        if (shouldUpdate) {\n                            $scope.$broadcast('calendar.refreshView');\n                        }\n                    }, 50);\n                    //Auto update the calendar when the locale changes\n                    var unbindLocaleWatcher = $scope.$watch(function () {\n                        return moment.locale();\n                    }, refreshCalendar);\n                    var unbindOnDestroy = [];\n                    unbindOnDestroy.push(unbindLocaleWatcher);\n                    //Refresh the calendar when any of these variables change.\n                    unbindOnDestroy.push($scope.$watch('currentDay', refreshCalendar));\n                    unbindOnDestroy.push($scope.$watch('view', refreshCalendar));\n                    unbindOnDestroy.push($scope.$watch('events', refreshCalendar, true));\n                    //Remove any watchers when the calendar is destroyed\n                    var unbindDestroyListener = $scope.$on('$destroy', function () {\n                        unbindOnDestroy.forEach(function (unbind) {\n                            unbind();\n                        });\n                    });\n                    unbindOnDestroy.push(unbindDestroyListener);\n                }\n            ]\n        };\n    });\n}(window, angular));","'use strict';\n\nangular\n  .module('mwl.calendar')\n  .factory('calendarTitle', function(moment, calendarConfig) {\n\n    function day(currentDay) {\n      return moment(currentDay).format(calendarConfig.titleFormats.day);\n    }\n\n    function week(currentDay) {\n      var weekTitleLabel = calendarConfig.titleFormats.week;\n      return weekTitleLabel.replace('{week}', moment(currentDay).week()).replace('{year}', moment(currentDay).format('YYYY'));\n    }\n\n    function month(currentDay) {\n      return moment(currentDay).format(calendarConfig.titleFormats.month);\n    }\n\n    function year(currentDay) {\n      return moment(currentDay).format(calendarConfig.titleFormats.year);\n    }\n\n    return {\n      day: day,\n      week: week,\n      month: month,\n      year: year\n    };\n\n  });\n","'use strict';\n\nangular\n  .module('mwl.calendar')\n  .factory('calendarHelper', function(moment, calendarConfig) {\n\n    function eventIsInPeriod(eventStart, eventEnd, periodStart, periodEnd) {\n\n      eventStart = moment(eventStart);\n      eventEnd = moment(eventEnd);\n      periodStart = moment(periodStart);\n      periodEnd = moment(periodEnd);\n\n      return (eventStart.isAfter(periodStart) && eventStart.isBefore(periodEnd)) ||\n        (eventEnd.isAfter(periodStart) && eventEnd.isBefore(periodEnd)) ||\n        (eventStart.isBefore(periodStart) && eventEnd.isAfter(periodEnd)) ||\n        eventStart.isSame(periodStart) ||\n        eventEnd.isSame(periodEnd);\n\n    }\n\n    function getEventsInPeriod(calendarDate, period, allEvents) {\n      var startPeriod = moment(calendarDate).startOf(period);\n      var endPeriod = moment(calendarDate).endOf(period);\n      return allEvents.filter(function(event) {\n        return eventIsInPeriod(event.startsAt, event.endsAt, startPeriod, endPeriod);\n      });\n    }\n\n    function getBadgeTotal(events) {\n      return events.filter(function(event) {\n        return event.incrementsBadgeTotal !== false;\n      }).length;\n    }\n\n    function getWeekDayNames() {\n      var weekdays = [];\n      var count = 0;\n      while (count < 7) {\n        weekdays.push(moment().weekday(count++).format(calendarConfig.dateFormats.weekDay));\n      }\n      return weekdays;\n    }\n\n    function filterEventsInPeriod(events, startPeriod, endPeriod) {\n      return events.filter(function(event) {\n        return eventIsInPeriod(event.startsAt, event.endsAt, startPeriod, endPeriod);\n      });\n    }\n\n    function getYearView(events, currentDay) {\n\n      var view = [];\n      var eventsInPeriod = getEventsInPeriod(currentDay, 'year', events);\n      var month = moment(currentDay).startOf('year');\n      var count = 0;\n      while (count < 12) {\n        var startPeriod = month.clone();\n        var endPeriod = startPeriod.clone().endOf('month');\n        var periodEvents = filterEventsInPeriod(eventsInPeriod, startPeriod, endPeriod);\n        view.push({\n          label: startPeriod.format(calendarConfig.dateFormats.month),\n          isToday: startPeriod.isSame(moment().startOf('month')),\n          events: periodEvents,\n          date: startPeriod,\n          badgeTotal: getBadgeTotal(periodEvents)\n        });\n\n        month.add(1, 'month');\n        count++;\n      }\n\n      return view;\n\n    }\n\n    function getMonthView(events, currentDay) {\n\n      var eventsInPeriod = getEventsInPeriod(currentDay, 'month', events);\n      var startOfMonth = moment(currentDay).startOf('month');\n      var day = startOfMonth.clone().startOf('week');\n      var endOfMonthView = moment(currentDay).endOf('month').endOf('week');\n      var view = [];\n      var today = moment().startOf('day');\n      while (day.isBefore(endOfMonthView)) {\n\n        var inMonth = day.month() === moment(currentDay).month();\n        var monthEvents = [];\n        if (inMonth) {\n          monthEvents = filterEventsInPeriod(eventsInPeriod, day, day.clone().endOf('day'));\n        }\n\n        view.push({\n          label: day.date(),\n          date: day.clone(),\n          inMonth: inMonth,\n          isPast: today.isAfter(day),\n          isToday: today.isSame(day),\n          isFuture: today.isBefore(day),\n          isWeekend: [0, 6].indexOf(day.day()) > -1,\n          events: monthEvents,\n          badgeTotal: getBadgeTotal(monthEvents)\n        });\n\n        day.add(1, 'day');\n      }\n\n      return view;\n\n    }\n\n    function getWeekView(events, currentDay) {\n\n      var startOfWeek = moment(currentDay).startOf('week');\n      var endOfWeek = moment(currentDay).endOf('week');\n      var dayCounter = startOfWeek.clone();\n      var days = [];\n      var today = moment().startOf('day');\n      while (days.length < 7) {\n        days.push({\n          weekDayLabel: dayCounter.format(calendarConfig.dateFormats.weekDay),\n          date: dayCounter.clone(),\n          dayLabel: dayCounter.format(calendarConfig.dateFormats.day),\n          isPast: dayCounter.isBefore(today),\n          isToday: dayCounter.isSame(today),\n          isFuture: dayCounter.isAfter(today),\n          isWeekend: [0, 6].indexOf(dayCounter.day()) > -1\n        });\n        dayCounter.add(1, 'day');\n      }\n\n      var eventsSorted = filterEventsInPeriod(events, startOfWeek, endOfWeek).map(function(event) {\n\n        var eventStart = moment(event.startsAt).startOf('day');\n        var eventEnd = moment(event.endsAt).startOf('day');\n        var weekViewStart = moment(startOfWeek).startOf('day');\n        var weekViewEnd = moment(endOfWeek).startOf('day');\n        var offset, span;\n\n        if (eventStart.isBefore(weekViewStart) || eventStart.isSame(weekViewStart)) {\n          offset = 0;\n        } else {\n          offset = eventStart.diff(weekViewStart, 'days');\n        }\n\n        if (eventEnd.isAfter(weekViewEnd)) {\n          eventEnd = weekViewEnd;\n        }\n\n        if (eventStart.isBefore(weekViewStart)) {\n          eventStart = weekViewStart;\n        }\n\n        span = moment(eventEnd).diff(eventStart, 'days') + 1;\n\n        event.daySpan = span;\n        event.dayOffset = offset;\n\n        return event;\n      });\n\n      return {days: days, events: eventsSorted};\n\n    }\n\n    function getDayView(events, currentDay, dayStartHour, dayEndHour, hourHeight) {\n\n      var calendarStart = moment(currentDay).startOf('day').add(dayStartHour, 'hours');\n      var calendarEnd = moment(currentDay).startOf('day').add(dayEndHour, 'hours');\n      var calendarHeight = (dayEndHour - dayStartHour + 1) * hourHeight;\n      var hourHeightMultiplier = hourHeight / 60;\n      var buckets = [];\n      var eventsInPeriod = filterEventsInPeriod(\n        events,\n        moment(currentDay).startOf('day').toDate(),\n        moment(currentDay).endOf('day').toDate()\n      );\n\n      return eventsInPeriod.map(function(event) {\n        if (moment(event.startsAt).isBefore(calendarStart)) {\n          event.top = 0;\n        } else {\n          event.top = (moment(event.startsAt).startOf('minute').diff(calendarStart.startOf('minute'), 'minutes') * hourHeightMultiplier) - 2;\n        }\n\n        if (moment(event.endsAt).isAfter(calendarEnd)) {\n          event.height = calendarHeight - event.top;\n        } else {\n          var diffStart = event.startsAt;\n          if (moment(event.startsAt).isBefore(calendarStart)) {\n            diffStart = calendarStart.toDate();\n          }\n          event.height = moment(event.endsAt).diff(diffStart, 'minutes') * hourHeightMultiplier;\n        }\n\n        if (event.top - event.height > calendarHeight) {\n          event.height = 0;\n        }\n\n        event.left = 0;\n\n        return event;\n      }).filter(function(event) {\n        return event.height > 0;\n      }).map(function(event) {\n\n        var cannotFitInABucket = true;\n        buckets.forEach(function(bucket, bucketIndex) {\n          var canFitInThisBucket = true;\n\n          bucket.forEach(function(bucketItem) {\n            if (eventIsInPeriod(event.startsAt, event.endsAt, bucketItem.startsAt, bucketItem.endsAt) ||\n              eventIsInPeriod(bucketItem.startsAt, bucketItem.endsAt, event.startsAt, event.endsAt)) {\n              canFitInThisBucket = false;\n            }\n          });\n\n          if (canFitInThisBucket && cannotFitInABucket) {\n            cannotFitInABucket = false;\n            event.left = bucketIndex * 150;\n            buckets[bucketIndex].push(event);\n          }\n\n        });\n\n        if (cannotFitInABucket) {\n          event.left = buckets.length * 150;\n          buckets.push([event]);\n        }\n\n        return event;\n\n      });\n\n    }\n\n    return {\n      getWeekDayNames: getWeekDayNames,\n      getYearView: getYearView,\n      getMonthView: getMonthView,\n      getWeekView: getWeekView,\n      getDayView: getDayView\n    };\n\n  });\n","'use strict';\n\nangular\n  .module('mwl.calendar')\n  .service('calendarDebounce', function($timeout) {\n\n    function debounce(func, wait, immediate) {\n      var timeout;\n      return function() {\n        var context = this, args = arguments;\n        function later() {\n          timeout = null;\n          if (!immediate) {\n            func.apply(context, args);\n          }\n        }\n        var callNow = immediate && !timeout;\n        $timeout.cancel(timeout);\n        timeout = $timeout(later, wait);\n        if (callNow) {\n          func.apply(context, args);\n        }\n      };\n    }\n\n    return debounce;\n\n  });\n","'use strict';\n\nangular\n  .module('mwl.calendar')\n  .provider('calendarConfig', function() {\n\n    var defaultDateFormats = {\n      hour: 'ha',\n      day: 'D MMM',\n      month: 'MMMM',\n      weekDay: 'dddd'\n    };\n\n    var defaultTitleFormats = {\n      day: 'dddd D MMMM, YYYY',\n      week: 'Week {week} of {year}',\n      month: 'MMMM YYYY',\n      year: 'YYYY'\n    };\n\n    var i18nStrings = {\n      eventsLabel: 'Events',\n      timeLabel: 'Time'\n    };\n\n    var configProvider = this;\n\n    configProvider.setDateFormats = function(formats) {\n      angular.extend(defaultDateFormats, formats);\n      return configProvider;\n    };\n\n    configProvider.setTitleFormats = function(formats) {\n      angular.extend(defaultTitleFormats, formats);\n      return configProvider;\n    };\n\n    configProvider.setI18nStrings = function(strings) {\n      angular.extend(i18nStrings, strings);\n      return configProvider;\n    };\n\n    configProvider.$get = function() {\n      return {\n        dateFormats: defaultDateFormats,\n        titleFormats: defaultTitleFormats,\n        i18nStrings: i18nStrings\n      };\n    };\n\n  });\n","'use strict';\n\nangular\n  .module('mwl.calendar')\n  .filter('calendarTruncateEventTitle', function() {\n\n    return function(string, length, boxHeight) {\n      if (!string) {\n        return '';\n      }\n\n      //Only truncate if if actually needs truncating\n      if (string.length >= length && string.length / 20 > boxHeight / 30) {\n        return string.substr(0, length) + '...';\n      } else {\n        return string;\n      }\n    };\n\n  });\n","'use strict';\n\nangular\n  .module('mwl.calendar')\n  .filter('calendarLimitTo', function(limitToFilter) {\n\n    if (angular.version.minor >= 4) { //1.4+ supports the begin attribute\n      return limitToFilter;\n    }\n\n    //Copied from the angular source. Only 1.4 has the begin functionality.\n    return function(input, limit, begin) {\n      if (Math.abs(Number(limit)) === Infinity) {\n        limit = Number(limit);\n      } else {\n        limit = parseInt(limit);\n      }\n      if (isNaN(limit)) {\n        return input;\n      }\n\n      if (angular.isNumber(input)) {\n        input = input.toString();\n      }\n      if (!angular.isArray(input) && !angular.isString(input)) {\n        return input;\n      }\n\n      begin = (!begin || isNaN(begin)) ? 0 : parseInt(begin);\n      begin = (begin < 0 && begin >= -input.length) ? input.length + begin : begin;\n\n      if (limit >= 0) {\n        return input.slice(begin, begin + limit);\n      } else if (begin === 0) {\n        return input.slice(limit, input.length);\n      } else {\n        return input.slice(Math.max(0, begin + limit), begin);\n      }\n    };\n\n  });\n","'use strict';\n\nangular\n  .module('mwl.calendar')\n  .directive('mwlDateModifier', function() {\n\n    return {\n      restrict: 'A',\n      controller: function($element, $attrs, $scope, moment) {\n\n        function onClick() {\n          if (angular.isDefined($attrs.setToToday)) {\n            $scope.date = new Date();\n          } else if (angular.isDefined($attrs.increment)) {\n            $scope.date = moment($scope.date).add(1, $scope.increment).toDate();\n          } else if (angular.isDefined($attrs.decrement)) {\n            $scope.date = moment($scope.date).subtract(1, $scope.decrement).toDate();\n          }\n          $scope.$apply();\n        }\n\n        $element.bind('click', onClick);\n\n        $scope.$on('$destroy', function() {\n          $element.unbind('click', onClick);\n        });\n\n      },\n      scope: {\n        date: '=',\n        increment: '=',\n        decrement: '='\n      }\n    };\n\n  });\n","'use strict';\n\nangular\n  .module('mwl.calendar')\n  .directive('mwlCollapseFallback', function($injector) {\n\n    if ($injector.has('collapseDirective')) {\n      return {};\n    }\n\n    return {\n      restrict: 'A',\n      controller: function($scope, $attrs, $element) {\n        var unbindWatcher = $scope.$watch($attrs.mwlCollapseFallback, function(shouldCollapse) {\n          if (shouldCollapse) {\n            $element.addClass('ng-hide');\n          } else {\n            $element.removeClass('ng-hide');\n          }\n        });\n\n        var unbindDestroy = $scope.$on('$destroy', function() {\n          unbindDestroy();\n          unbindWatcher();\n        });\n\n      }\n    };\n\n  });\n","'use strict';\n\nangular\n  .module('mwl.calendar')\n  .directive('mwlCalendarYear', function() {\n\n    return {\n      templateUrl: 'src/templates/calendarYearView.html',\n      restrict: 'EA',\n      require: '^mwlCalendar',\n      scope: {\n        events: '=',\n        currentDay: '=',\n        onEventClick: '=',\n        onEditEventClick: '=',\n        onDeleteEventClick: '=',\n        editEventHtml: '=',\n        deleteEventHtml: '=',\n        autoOpen: '=',\n        onTimespanClick: '='\n      },\n      controller: function($scope, moment, calendarHelper) {\n\n        var vm = this;\n        var firstRun = true;\n\n        $scope.$on('calendar.refreshView', function() {\n          vm.view = calendarHelper.getYearView($scope.events, $scope.currentDay);\n\n          //Auto open the calendar to the current day if set\n          if ($scope.autoOpen && firstRun) {\n            firstRun = false;\n            vm.view.forEach(function(month) {\n              if (moment($scope.currentDay).startOf('month').isSame(month.date)) {\n                vm.monthClicked(month, true);\n              }\n            });\n          }\n\n        });\n\n        vm.monthClicked = function(month, monthClickedFirstRun) {\n\n          if (!monthClickedFirstRun) {\n            $scope.onTimespanClick({calendarDate: month.date.toDate()});\n          }\n\n          vm.openRowIndex = null;\n          var monthIndex = vm.view.indexOf(month);\n          if (monthIndex === vm.openMonthIndex) { //the month has been clicked and is already open\n            vm.openMonthIndex = null; //close the open month\n          } else {\n            vm.openMonthIndex = monthIndex;\n            vm.openRowIndex = Math.floor(monthIndex / 4);\n          }\n\n        };\n\n      },\n      controllerAs: 'vm',\n      link: function(scope, element, attrs, calendarCtrl) {\n        scope.vm.calendarCtrl = calendarCtrl;\n      }\n    };\n\n  });\n","'use strict';\n\nangular\n  .module('mwl.calendar')\n  .directive('mwlCalendarWeek', function() {\n\n    return {\n      templateUrl: 'src/templates/calendarWeekView.html',\n      restrict: 'EA',\n      require: '^mwlCalendar',\n      scope: {\n        events: '=',\n        currentDay: '=',\n        onEventClick: '='\n      },\n      controller: function($scope, calendarHelper) {\n\n        var vm = this;\n\n        $scope.$on('calendar.refreshView', function() {\n          vm.view = calendarHelper.getWeekView($scope.events, $scope.currentDay);\n        });\n\n      },\n      controllerAs: 'vm',\n      link: function(scope, element, attrs, calendarCtrl) {\n        scope.vm.calendarCtrl = calendarCtrl;\n      }\n    };\n\n  });\n","'use strict';\n\nangular\n  .module('mwl.calendar')\n  .directive('mwlCalendarSlideBox', function() {\n\n    return {\n      restrict: 'EA',\n      templateUrl: 'src/templates/calendarSlideBox.html',\n      replace: true,\n      controller: function($scope, $sce) {\n\n        var vm = this;\n        vm.$sce = $sce;\n\n        var unbindWatcher = $scope.$watch('isOpen', function(isOpen) {\n          vm.shouldCollapse = !isOpen;\n        });\n\n        var unbindDestroy = $scope.$on('$destroy', function() {\n          unbindDestroy();\n          unbindWatcher();\n        });\n\n      },\n      controllerAs: 'vm',\n      require: ['^?mwlCalendarMonth', '^?mwlCalendarYear'],\n      link: function(scope, elm, attrs, ctrls) {\n        scope.isMonthView = !!ctrls[0];\n        scope.isYearView = !!ctrls[1];\n      },\n      scope: {\n        isOpen: '=',\n        events: '=',\n        onEventClick: '=',\n        editEventHtml: '=',\n        onEditEventClick: '=',\n        deleteEventHtml: '=',\n        onDeleteEventClick: '='\n      }\n    };\n\n  });\n","'use strict';\n\nangular\n  .module('mwl.calendar')\n  .directive('mwlCalendarMonth', function() {\n\n    return {\n      templateUrl: 'src/templates/calendarMonthView.html',\n      restrict: 'EA',\n      require: '^mwlCalendar',\n      scope: {\n        events: '=',\n        currentDay: '=',\n        onEventClick: '=',\n        onEditEventClick: '=',\n        onDeleteEventClick: '=',\n        editEventHtml: '=',\n        deleteEventHtml: '=',\n        autoOpen: '=',\n        onTimespanClick: '='\n      },\n      controller: function($scope, moment, calendarHelper) {\n\n        var vm = this;\n        var firstRun = true;\n\n        $scope.$on('calendar.refreshView', function() {\n\n          vm.weekDays = calendarHelper.getWeekDayNames();\n\n          vm.view = calendarHelper.getMonthView($scope.events, $scope.currentDay);\n          var rows = Math.floor(vm.view.length / 7);\n          vm.monthOffsets = [];\n          for (var i = 0; i < rows; i++) {\n            vm.monthOffsets.push(i * 7);\n          }\n\n          //Auto open the calendar to the current day if set\n          if ($scope.autoOpen && firstRun) {\n            firstRun = false;\n            vm.view.forEach(function(day) {\n              if (day.inMonth && moment($scope.currentDay).startOf('day').isSame(day.date)) {\n                vm.dayClicked(day, true);\n              }\n            });\n          }\n\n        });\n\n        vm.dayClicked = function(day, dayClickedFirstRun) {\n\n          if (!dayClickedFirstRun) {\n            $scope.onTimespanClick({\n              calendarDate: day.date.toDate()\n            });\n          }\n\n          vm.openRowIndex = null;\n          var dayIndex = vm.view.indexOf(day);\n          if (dayIndex === vm.openDayIndex) { //the day has been clicked and is already open\n            vm.openDayIndex = null; //close the open day\n          } else {\n            vm.openDayIndex = dayIndex;\n            vm.openRowIndex = Math.floor(dayIndex / 7);\n          }\n\n        };\n\n        vm.highlightEvent = function(event, shouldAddClass) {\n\n          vm.view.forEach(function(day) {\n            delete day.highlightClass;\n            if (shouldAddClass) {\n              var dayContainsEvent = day.events.indexOf(event) > -1;\n              if (dayContainsEvent) {\n                day.highlightClass = 'day-highlight dh-event-' + event.type;\n              }\n            }\n          });\n\n        };\n      },\n      controllerAs: 'vm',\n      link: function(scope, element, attrs, calendarCtrl) {\n        scope.vm.calendarCtrl = calendarCtrl;\n      }\n    };\n\n  });\n","'use strict';\n\nangular\n  .module('mwl.calendar')\n  .directive('mwlCalendarDay', function() {\n\n    return {\n      templateUrl: 'src/templates/calendarDayView.html',\n      restrict: 'EA',\n      require: '^mwlCalendar',\n      scope: {\n        events: '=',\n        currentDay: '=',\n        onEventClick: '=',\n        dayViewStart: '=',\n        dayViewEnd: '=',\n        dayViewSplit: '='\n      },\n      controller: function($scope, $timeout, moment, calendarHelper, calendarConfig) {\n\n        var vm = this;\n        var dayViewStart, dayViewEnd;\n\n        vm.calendarConfig = calendarConfig;\n\n        function updateDays() {\n          dayViewStart = moment($scope.dayViewStart || '00:00', 'HH:mm');\n          dayViewEnd = moment($scope.dayViewEnd || '23:00', 'HH:mm');\n          vm.dayViewSplit = parseInt($scope.dayViewSplit);\n          vm.hourHeight = (60 / $scope.dayViewSplit) * 30;\n          vm.hours = [];\n          var dayCounter = moment(dayViewStart);\n          for (var i = 0; i <= dayViewEnd.diff(dayViewStart, 'hours'); i++) {\n            vm.hours.push({\n              label: dayCounter.format(calendarConfig.dateFormats.hour)\n            });\n            dayCounter.add(1, 'hour');\n          }\n        }\n\n        var originalLocale = moment.locale();\n\n        $scope.$on('calendar.refreshView', function() {\n\n          if (originalLocale !== moment.locale()) {\n            originalLocale = moment.locale();\n            updateDays();\n          }\n\n          vm.view = calendarHelper.getDayView($scope.events, $scope.currentDay, dayViewStart.hours(), dayViewEnd.hours(), vm.hourHeight);\n\n        });\n\n        updateDays();\n\n      },\n      controllerAs: 'vm'\n    };\n\n  });\n","'use strict';\n\nangular\n  .module('mwl.calendar')\n  .directive('mwlCalendar', function() {\n\n    return {\n      templateUrl: 'src/templates/calendar.html',\n      restrict: 'EA',\n      scope: {\n        events: '=',\n        view: '=',\n        viewTitle: '=',\n        currentDay: '=',\n        editEventHtml: '=',\n        deleteEventHtml: '=',\n        autoOpen: '=',\n        onEventClick: '&',\n        onEditEventClick: '&',\n        onDeleteEventClick: '&',\n        onTimespanClick: '&',\n        onDrillDownClick: '&',\n        dayViewStart: '@',\n        dayViewEnd: '@',\n        dayViewSplit: '@'\n      },\n      controller: function($scope, $timeout, moment, calendarTitle, calendarDebounce) {\n\n        var vm = this;\n\n        $scope.events = $scope.events || [];\n\n        vm.changeView = function(view, newDay) {\n          $scope.view = view;\n          $scope.currentDay = newDay;\n        };\n\n        vm.drillDown = function(date) {\n\n          var rawDate = moment(date).toDate();\n\n          var nextView = {\n            year: 'month',\n            month: 'day',\n            week: 'day'\n          };\n\n          if ($scope.onDrillDownClick({calendarDate: rawDate, calendarNextView: nextView[$scope.view]}) !== false) {\n            vm.changeView(nextView[$scope.view], rawDate);\n          }\n\n        };\n\n        var previousDate = moment($scope.currentDay);\n        var previousView = angular.copy($scope.view);\n\n        //Use a debounce to prevent it being called 3 times on initialisation\n        var refreshCalendar = calendarDebounce(function() {\n          if (calendarTitle[$scope.view]) {\n            $scope.viewTitle = calendarTitle[$scope.view]($scope.currentDay);\n          }\n\n          //if on-timespan-click=\"calendarDay = calendarDate\" is set then dont update the view as nothing needs to change\n          var currentDate = moment($scope.currentDay);\n          var shouldUpdate = true;\n          if (previousDate.clone().startOf($scope.view).isSame(currentDate.clone().startOf($scope.view)) &&\n            !previousDate.isSame(currentDate) &&\n            $scope.view === previousView) {\n            shouldUpdate = false;\n          }\n          previousDate = currentDate;\n          previousView = angular.copy($scope.view);\n\n          if (shouldUpdate) {\n            $scope.$broadcast('calendar.refreshView');\n          }\n        }, 50);\n\n        //Auto update the calendar when the locale changes\n        var unbindLocaleWatcher = $scope.$watch(function() {\n          return moment.locale();\n        }, refreshCalendar);\n\n        var unbindOnDestroy = [];\n        unbindOnDestroy.push(unbindLocaleWatcher);\n\n        //Refresh the calendar when any of these variables change.\n        unbindOnDestroy.push($scope.$watch('currentDay', refreshCalendar));\n        unbindOnDestroy.push($scope.$watch('view', refreshCalendar));\n        unbindOnDestroy.push($scope.$watch('events', refreshCalendar, true));\n\n        //Remove any watchers when the calendar is destroyed\n        var unbindDestroyListener = $scope.$on('$destroy', function() {\n          unbindOnDestroy.forEach(function(unbind) {\n            unbind();\n          });\n        });\n        unbindOnDestroy.push(unbindDestroyListener);\n\n      }\n    };\n\n  });\n"],"sourceRoot":"/source/"}